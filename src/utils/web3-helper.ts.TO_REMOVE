import { Action, ActionCreator } from 'redux'
import { ThunkAction } from 'redux-thunk'
import { ApplicationState } from '../features/rootReducer'
import { AbiItem } from 'web3-utils'
// import { ExtraArgument } from '../features/common/types'

export enum Web3ActionType {
  Web3Action = '@@web3/WEB3_ACTION'
}

interface Web3FunctionPayload {
  abi: AbiItem
  parameters: []
}

export interface Web3Action {
  type: Web3ActionType.Web3Action
  payload: Web3FunctionPayload
}

interface TransactionConfig {
  payload: Web3FunctionPayload
  // onSuccess: OnSuccessType;
  // onError: OnErrorType;
  // onProgress?: OnProgressType;
}

export type Web3TransactionFunction = (url: string, config: TransactionConfig) => Web3Action

export interface IWeb3ReduxWrapper {
  send: Web3TransactionFunction
}

class Web3ReduxWrapper implements IWeb3ReduxWrapper {
  public call: Web3TransactionFunction = (url: string, config: TransactionConfig) => ({
    type: Web3ActionType.Web3Action,
    payload: config.payload,
    meta: {
      url
      // onSuccess: config.onSuccess,
      // onError: config.onError,
      // onProgress: config.onProgress
    }
  })

  public send: Web3TransactionFunction = (url: string, config: TransactionConfig) => ({
    type: Web3ActionType.Web3Action,
    payload: config.payload,
    meta: {
      url
      // onSuccess: config.onSuccess,
      // onError: config.onError,
      // onProgress: config.onProgress
    }
  })
}

const web3Instance = new Web3ReduxWrapper()

export default web3Instance
